name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate_version.outputs.version }}
      project_name: ${{ steps.get_project_name.outputs.project_name }}
      is_prerelease: ${{ steps.validate_version.outputs.is_prerelease }}
      changelog_content: ${{ steps.extract_changelog.outputs.content }}
      hyperlink: ${{ steps.extract_hyperlink.outputs.link }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate version format
        id: validate_version
        run: |
          if [[ ! $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format. Expected format: v1.2.3 or v1.2.3-alpha"
            exit 1
          fi
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release version
          if [[ $VERSION == *-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          echo "Validated version: $VERSION"

      - name: Get CMake project version and suffix
        id: get_cmake_version
        run: |
          CMAKE_VERSION=$(grep -A2 "^project" CMakeLists.txt | grep "VERSION" | sed 's/.*VERSION *\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*/\1/')
          CMAKE_SUFFIX=$(grep "PROJECT_VERSION_SUFFIX" CMakeLists.txt | sed 's/.*"\(.*\)".*/\1/')
          
          if [ -n "$CMAKE_SUFFIX" ]; then
            FULL_CMAKE_VERSION="${CMAKE_VERSION}-${CMAKE_SUFFIX}"
          else
            FULL_CMAKE_VERSION="${CMAKE_VERSION}"
          fi
          
          echo "cmake_version=$FULL_CMAKE_VERSION" >> $GITHUB_OUTPUT
          echo "Found CMake version: $FULL_CMAKE_VERSION"

      - name: Compare versions
        run: |
          TAG_VERSION="${{ steps.validate_version.outputs.version }}"
          CMAKE_VERSION="${{ steps.get_cmake_version.outputs.cmake_version }}"
          
          if [ "$TAG_VERSION" != "$CMAKE_VERSION" ]; then
            echo "::error::Version mismatch! Git tag ($TAG_VERSION) does not match CMake version ($CMAKE_VERSION)"
            echo "Please ensure the version in CMakeLists.txt (including any suffix) matches the git tag"
            exit 1
          fi
          echo "Version validation successful: $TAG_VERSION"

      - name: Get project name from CMakeLists.txt
        id: get_project_name
        run: |
          PROJECT_NAME=$(grep -A1 "^project(" CMakeLists.txt | tr -d '\n' | sed -n 's/.*project(\s*\([^ ]*\).*/\1/p')
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "Found project name: $PROJECT_NAME"

      - name: Validate CHANGELOG.md exists
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "::error::CHANGELOG.md file is missing"
            exit 1
          fi

      - name: Validate version in CHANGELOG.md
        run: |
          VERSION="${{ steps.validate_version.outputs.version }}"
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "::error::Version $VERSION not found in CHANGELOG.md"
            echo "Please add a section for version $VERSION in CHANGELOG.md"
            exit 1
          fi

      - name: Extract changelog for version
        id: extract_changelog
        run: |
          VERSION="${{ steps.validate_version.outputs.version }}"
          # Extract content between current version header and next header
          CONTENT=$(awk -v version="$VERSION" '
            $0 ~ "## \\[" version "\\]" {flag=1}
            /^## \[/ && $0 !~ "## \\[" version "\\]" && flag {flag=0}
            flag {print}
          ' CHANGELOG.md)
          
          # Ensure we found some content
          if [ -z "$CONTENT" ]; then
            echo "::error::No changelog content found for version $VERSION"
            exit 1
          fi
          
          # Store the changelog content for the release
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "content<<$EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Extract changelog hyperlink
        id: extract_hyperlink
        run: |
          VERSION="${{ steps.validate_version.outputs.version }}"
          # Extract the hyperlink line for the current version
          HYPERLINK=$(awk -v version="$VERSION" '$0 ~ "\\[" version "\\]:" {print}' CHANGELOG.md | tail -n 1)
          
          # Ensure we found the hyperlink
          if [ -z "$HYPERLINK" ]; then
            echo "::error::No hyperlink found for version $VERSION in CHANGELOG.md"
            exit 1
          fi
          
          # Store the hyperlink for the release
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "link<<$EOF" >> $GITHUB_OUTPUT
          echo "$HYPERLINK" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

  build-windows:
    needs: validate
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [msvc]
        include:
          - compiler: msvc
            preset: windows-msvc-release
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF_NAME -replace '^v',''
          "version=$version" >> $env:GITHUB_OUTPUT

      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install NSIS
        run: choco install nsis -y

      - name: Configure CMake
        run: cmake --preset ${{ matrix.preset }}
        env:
          VCPKG_ROOT: C:\vcpkg
        
      - name: Build
        run: cmake --build build/${{ matrix.preset }}

      - name: Package
        run: |
          cd build/${{ matrix.preset }}
          cpack -G NSIS || (echo "::error::NSIS packaging failed" && exit 1)
          cpack -G ZIP || (echo "::error::ZIP packaging failed" && exit 1)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-packages
          path: |
            ./build/${{ matrix.preset }}/*.exe
            ./build/${{ matrix.preset }}/*.zip

  build-linux:
    needs: validate
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        compiler: [gcc]
        include:
          - compiler: gcc
            version: 13
            preset: unixlike-gcc-release
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl wget tar zip unzip cmake pkg-config
          sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglu1-mesa autoconf libltdl-dev
          sudo apt-get install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
          sudo apt-get install -y rpm

      - name: Setup vcpkg
        id: vcpkg
        run: |
          if [ ! -d ~/vcpkg ]; then
            echo "Installing vcpkg..."
            git clone https://github.com/microsoft/vcpkg.git ~/vcpkg
            ~/vcpkg/bootstrap-vcpkg.sh
            if [ $? -ne 0 ]; then
              echo "::error::vcpkg bootstrap failed"
              exit 1
            fi
          fi
          ~/vcpkg/vcpkg integrate install
          echo "VCPKG_ROOT=~/vcpkg" >> $GITHUB_ENV

      - name: Configure CMake
        run: cmake --preset ${{ matrix.preset }} -DCMAKE_INSTALL_PREFIX=/usr/

      - name: Build
        run: cmake --build build/${{ matrix.preset }}

      - name: Package
        run: |
          cd build/${{ matrix.preset }}
          cpack -G DEB
          cpack -G RPM
          cpack -G TGZ

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            ./build/${{ matrix.preset }}/*.deb
            ./build/${{ matrix.preset }}/*.rpm
            ./build/${{ matrix.preset }}/*.tar.gz

  create-and-upload:
    needs: [validate, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify artifacts exist
        run: |
          if [ ! -d "artifacts/windows-packages" ] || [ ! -d "artifacts/linux-packages" ]; then
            echo "::error::Missing artifacts directories"
            exit 1
          fi
          
          # Check if we have at least one file of each type
          if [ $(find artifacts/windows-packages -name "*.exe" | wc -l) -eq 0 ]; then
            echo "::error::Missing Windows installer (exe)"
            exit 1
          fi
          if [ $(find artifacts/windows-packages -name "*.zip" | wc -l) -eq 0 ]; then
            echo "::error::Missing Windows ZIP package"
            exit 1
          fi
          if [ $(find artifacts/linux-packages -name "*.deb" | wc -l) -eq 0 ]; then
            echo "::error::Missing Debian package"
            exit 1
          fi
          if [ $(find artifacts/linux-packages -name "*.rpm" | wc -l) -eq 0 ]; then
            echo "::error::Missing RPM package"
            exit 1
          fi
          if [ $(find artifacts/linux-packages -name "*.tar.gz" | wc -l) -eq 0 ]; then
            echo "::error::Missing Linux tarball"
            exit 1
          fi

      - name: Generate checksums
        id: generate_checksums
        run: |
          cd artifacts
          mkdir -p checksums
          
          # Generate SHA256 checksums for all packages
          (
            cd windows-packages && sha256sum *.exe *.zip 2>/dev/null
            cd ../linux-packages && sha256sum *.deb *.rpm *.tar.gz 2>/dev/null
          ) | tee checksums/SHA256SUMS
          
          # Create formatted message for release body
          echo 'CHECKSUMS<<EOF' >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          cat checksums/SHA256SUMS >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          body: |
            # Release v${{ needs.validate.outputs.version }}
            
            ${{ needs.validate.outputs.changelog_content }}
            
            ## Checksums
            ${{ env.CHECKSUMS }}
            
            ## Manual Steps Required:
            1. Review the changelog above (automatically extracted from CHANGELOG.md)
            
            ${{ needs.validate.outputs.hyperlink }}
          files: |
            artifacts/windows-packages/*
            artifacts/linux-packages/*
            artifacts/checksums/SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
